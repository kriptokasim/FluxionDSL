// ───────── Fluxion DSL Grammar (Complete) ─────────

// Whitespace & comments
WS: /[ \t\f]+/
%ignore WS

COMMENT_SLASH: /\/\/[^\n]*/
COMMENT_HASH : /#[^\n]*/
%ignore COMMENT_SLASH
%ignore COMMENT_HASH

// Newlines (CRLF / LF)
NL: /(\r?\n)+/

// Tokens
IDENT: /[A-Za-z_][A-Za-z0-9_\-]*/
EQUAL: "="
COLON: ":"
ARROW: "=>"

// Strings: double-quoted with escapes
DQSTRING: /"([^"\\]|\\.)*"/

// Numbers: int / float / sci
NUMBER: /-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/

// Entry point
start: NL* (statement (NL)+)* statement? NL*

// Statements
?statement: assign
         | return_
         | if_
         | for_
         | func
         | command
         | expr_stmt
         | reassign

// let name = expr
assign: "let" IDENT "=" expr

// name = expr (reassignment)
reassign: IDENT "=" expr

// return expr
return_: "return" expr?

// if (cond) { ... } else { ... }
if_: "if" "(" expr ")" block ("else" (block | if_))?

// for name in expr { ... }
for_: "for" IDENT "in" expr block

// func name(params) { ... }
func: "func" IDENT "(" param_list? ")" block
param_list: IDENT ("," IDENT)*

// Block of statements
block: "{" NL* (statement (NL)+)* statement? NL* "}"

// Expression as statement
expr_stmt: expr

// Command: NAME { key: value, ... } or NAME (desugared from NAME key=value)
command: IDENT map

// Expressions with precedence
?expr: ternary

?ternary: logical_or ("?" expr ":" expr)?

logical_or: logical_and ("||" logical_and)*

logical_and: equality ("&&" equality)*

equality: comparison (("==" | "!=") comparison)*

comparison: nullish_coalesce (("<" | ">" | "<=" | ">=") nullish_coalesce)*

nullish_coalesce: additive ("??" additive)*

additive: multiplicative (("+" | "-") multiplicative)*

multiplicative: unary (("*" | "/" | "%") unary)*

?unary: ("!" | "-" | "+") unary
      | postfix

?postfix: primary ("." IDENT)*

?primary: call
        | get_chain
        | var
        | dqstring
        | number
        | list
        | map
        | "(" expr ")"
        | "true"  -> true_
        | "false" -> false_
        | "null"  -> null_
        | "nil"   -> null_

// Function call
call: IDENT "(" arg_expr_list? ")"
arg_expr_list: expr ("," expr)*

// Property access chain
get_chain: IDENT ("." IDENT)+

// Variable reference
var: IDENT

// Literals
dqstring: DQSTRING
number: NUMBER

// Collections
list: "[" NL* list_items? NL* "]"
list_items: expr (NL* "," NL* expr)* (NL* ",")?

map:  "{" NL* map_items? NL* "}"
map_items: keyval (NL* "," NL* keyval)* (NL* ",")?

keyval: (IDENT | DQSTRING) (":" | "=") expr

// Booleans and null
true_: "true"
false_: "false"
null_: "null" | "nil"
